<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database/sql on zhaolion&#39;s knowledge dropbox</title>
    <link>https://blog.zhaolion.dev/tags/database/sql/</link>
    <description>Recent content in database/sql on zhaolion&#39;s knowledge dropbox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language><atom:link href="https://blog.zhaolion.dev/tags/database/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>database/sql: Stmt的使用以及坑</title>
      <link>https://blog.zhaolion.dev/post/golang/upgrade/database.sql.driver.stmt/</link>
      <pubDate>Mon, 14 Jan 2019 00:37:49 +0800</pubDate>
      
      <guid>https://blog.zhaolion.dev/post/golang/upgrade/database.sql.driver.stmt/</guid>
      <description>基本知识 众所周知，Golang 操作数据库，是通过 database/sql 包，以及第三方的实现了 database/sql/driver 接口的数据库驱动包来共同完成的。
其中 database/sql/driver 中的接口 Conn 和 Stmt，官方交给第三方实现驱动，并且是协程不安全的。官方实现的 database/sql 包中的 DB 和 Stmt 是协程安全的，因为内部实现是连接池。
如何使用 database/sql 的 MySQL 驱动的使用范例 基本类似于
// Insert stmtIns, err := db.Prepare(&amp;#34;INSERT INTO squareNum VALUES( ?, ? )&amp;#34;) if err != nil { panic(err.Error()) // proper error handling instead of panic in your app } defer stmtIns.Close() stmtIns.Exec(i, j) // Query stmtOut, err := db.Prepare(&amp;#34;SELECT squareNumber FROM squarenum WHERE number = ?</description>
    </item>
    
  </channel>
</rss>
