<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>module on zhaolion&#39;s knowledge dropbox</title>
    <link>https://blog.zhaolion.dev/tags/module/</link>
    <description>Recent content in module on zhaolion&#39;s knowledge dropbox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 14 Jan 2019 00:24:08 +0800</lastBuildDate><atom:link href="https://blog.zhaolion.dev/tags/module/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Modules 简单介绍</title>
      <link>https://blog.zhaolion.dev/post/golang/basic/go.mod/</link>
      <pubDate>Mon, 14 Jan 2019 00:24:08 +0800</pubDate>
      
      <guid>https://blog.zhaolion.dev/post/golang/basic/go.mod/</guid>
      <description>Go Modules Golang 在 1.11 版本推出了万众期待的依赖管理工具 go Modules
我厌倦了 Glide 那无穷无尽的 update 状态之后，还是决定自己再一次尝试新的依赖管理工具 (~~ 毕竟是 google 爸爸推出的~~)
还好尝试的比较晚，已经有许多 bug 得到解决，社区也有许多文章给出了最佳实践，建议先看看 intro-to-go-modules
1. enable GO111MODULE go modules 默认是没有开启的，需要设置环境变量 GO111MODULE=on, 如果没有设置, 会有一些提示。
2. help doc 接下来就是查看一下帮助手册 go mod help:
Go mod provides access to operations on modules.  Note that support for modules is built into all the go commands, not just &amp;#39;go mod&amp;#39;. For example, day-to-day adding, removing, upgrading, and downgrading of dependencies should be done using &amp;#39;go get&amp;#39;.</description>
    </item>
    
  </channel>
</rss>
